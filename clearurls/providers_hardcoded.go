package clearurls

// Implements a method to `go generate` a .go source file with
// the `RunnableProvider`s from the JSON, for this library
// to have an internet-less fallback

import (
	"fmt"
	"regexp"
	"slices"
	"strings"
)

//go:generate go run ../tools/cleanurls/main.go generate github providers_hardcoded_data.go

// This value is overwritten by the additional file created by the `go:generate` above
var hardcodedProvidersPrepared []RunnableProvider = nil

var hardcodedProvidersCompiled []RunnableProvider

// If a hardcoded version was included (eg: with `go generate`), then return it.
// Otherwise return `nil, nil`.
func HardcodedProviders() ([]RunnableProvider, error) {
	if hardcodedProvidersCompiled == nil {
		if hardcodedProvidersPrepared == nil {
			return nil, nil
		}
		compiled, err := Compile(hardcodedProvidersPrepared)
		if err != nil {
			return nil, err
		}
		hardcodedProvidersCompiled = compiled
	}
	return hardcodedProvidersCompiled, nil
}

// Same as `HardcodedProviders` but returns an error if `hardcodedProvidersPrepared` has
// not been generated
func MustHaveHardcodedProviders() ([]RunnableProvider, error) {
	providers, err := HardcodedProviders()
	if err != nil {
		return nil, err
	}
	if providers == nil {
		return nil, fmt.Errorf("Cannot load hardcoded providers, they have not been generated. Use `go generate` in this folder.")
	}
	return providers, nil
}

// Generates a .go source code with a list that can be compiled into an
// equivalent `[]RunnableProvider` at build time. Used by `go generate`.
func GenerateGoSourceCodeForProviders(providers []RunnableProvider) string {
	packageName := "clearurls"
	lines := make([]string, len(providers))
	packagePrefixRemover := regexp.MustCompile("^&" + packageName + "\\.")
	slices.SortFunc(providers[:], func(i, j RunnableProvider) int {
		return strings.Compare(strings.ToLower(i.getName()), strings.ToLower(j.getName()))
	})
	for i, provider := range providers {
		literal := fmt.Sprintf("%+#v", provider.prepare())
		literal = packagePrefixRemover.ReplaceAllString(literal, "&")
		lines[i] = fmt.Sprintf("\t\t%s,\n", literal)
	}
	return "package " + packageName + "\n\n" +
		"// DO NOT COMMIT : Generated by ProvidersToGoSource\n\n" +
		"func init() {\n" +
		"\thardcodedProvidersPrepared = []RunnableProvider {\n" +
		strings.Join(lines, "") +
		"\t}\n" +
		"}\n"
}
